#!/usr/bin/env node

"use strict";

const fs = require("fs");
const path = require("path");
const updateNotifier = require("update-notifier");
const minimist = require("minimist");
const colors = require("colors");
const numeral = require("numeral");
const prettyBytes = require("pretty-bytes");
const Table = require("cli-table");
const gitDiffArchive = require("../");
const pkg = require("../package.json");


updateNotifier({pkg}).notify({defer: false});


const argv = minimist(process.argv.slice(2), {
  alias: {
    F: "diff-filter",
    f: "format",
    o: "output",
    p: "prefix",
    n: "dry-run",
    v: "verbose",
    V: "version",
    h: "help"
  },
  string: [
    "diff-filter",
    "format",
    "output",
    "prefix",
    "_"
  ],
  boolean: [
    "dry-run",
    "verbose",
    "help",
    "version"
  ],
  default: {
    "verbose": false,
    "dry-run": false,
    "help": false,
    "version": false
  }
});

const table = new Table({
  chars: {
    "top": "═",
    "top-mid": "╤",
    "top-left": "╔",
    "top-right": "╗",
    "bottom": "═",
    "bottom-mid": "╧",
    "bottom-left": "╚",
    "bottom-right": "╝",
    "left": "║",
    "left-mid": "╟",
    "right": "║",
    "right-mid": "╢"
  },
  style: {
    head: [],
    border: []
  }
});


// help
if (argv.help) {
  fs.createReadStream(__dirname + "/usage.txt").pipe(process.stdout);

// version
} else if (argv.version) {
  console.log(pkg.version);
  process.exit(0);

} else {
  // parse options
  const commits = argv._.slice();
  const commit = commits[0];
  const oldCommit = commits[1]
  const options = {};
  if (argv["diff-filter"]) options.diffFilter = argv["diff-filter"];
  if (argv.format) options.format = argv.format;
  if (argv.output) options.output = argv.output;
  if (argv.prefix) options.prefix = argv.prefix;
  if (argv["dry-run"]) options.dryRun = true;
  if (argv.verbose) options.verbose = true;

  // archive
  gitDiffArchive(commit, oldCommit, options)
    .then((res) => {
      table.push(
        [colors.green.bold("Processing Time"), `${numeral(res.time).format("0,0")} ms`],
        [colors.green.bold("Git Command"), res.cmd],
        [colors.green.bold("Output"), `${res.output} (${prettyBytes(res.bytes)})`],
        [colors.green.bold("Prefix"), res.prefix],
        [colors.green.bold("Files"), res.files.join("\n")],
        [colors.green.bold("Exclude"), res.exclude.join("\n")]
      );
      console.log(table.toString());
    })
    .catch((err) => {
      console.error(colors.red.bold(`[Error] ${err}`));
    });
}
